import torch
import torch.nn as nn



class GlobalDecoder(nn.Module):
    """
    Based on the hidden tensor generated by the Encoder and the related time series value at prediction step
    
    input_size: should equals to the hidden_size + covariate_size
    output_size:  horizon_size +1
    """
    def __init__(self, hidden_size, covariate_size, horizon_size):
        super(GlobalDecoder, self).__init__()
        self.linear1 = nn.Linear(in_features= hidden_size+ covariate_size, out_features= hidden_size)
        self.linear2 = nn.Linear(in_features=hidden_size, out_features=horizon_size+1)
    
    def forward(self, input):
        layer1_output = self.linear1(input)
        layer2_output = self.linear2(layer1_output)
        return layer2_output

class LocalDecoder(nn.Module):
    """
    Based on the result tensor generated by the GlobalDecoder and the related time series value at prediction step
    input_size: 1(horizon_k)+ 1(horizon_agnostic) + covariate_size
    output_size: quantile_size
    """
    def __init__(self, covariate_size, quantile_size):
        super(LocalDecoder,self).__init__()
        self.linear1 = nn.Linear(in_features= 1+1+covariate_size, out_features=100)
        self.linear2 = nn.Linear(in_features= 100, out_features= quantile_size)
    
    def forward(self, input):
        layer1_output = self.linear1(input)
        layer2_output = self.linear2(layer1_output)
        return layer2_output
